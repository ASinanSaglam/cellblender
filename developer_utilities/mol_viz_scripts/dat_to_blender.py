#############################################################################################
#
# Terminal input: blender -P ~/.../cellblender/developer_utilities/mol_viz_scripts/dat_to_blender.py -- ~/.../viz_data/seed_00001 <-- where the .dat or .ascii files are located.
# 
# This file reads binary data files that are generated by MCell and updates their display in blender. 
# Color and object geomerty are not handled here (because this data is not given in the seed_00001 files).
#
#############################################################################################

import json
import bpy
import os
import re
import sys
sys.path.insert(1, '/home/lmckeereid/src4/cellblender') # absolute dir import
#from ... import cellblender_mol_viz as cb_mv # ** relative dir import not working **
import cellblender_mol_viz as cb_mv
from cellblender_mol_viz import global_mol_file_list

# adds file path to cellblender list then calls a function from cellblender_mol_viz.py to update the display
def visualize_data(scene, fullpath):
    # adds file path to cellblender's mol file list
    global global_mol_file_list
    global_mol_file_list.append(fullpath)
    # updates mol display by calling cellblender_mol_viz.py functions
    cb_mv.mol_viz_update(bpy.context.scene.mcell, bpy.context)
    
# reports error when the cellblender frame goes past the mcell data provided
def out_of_bounds(n):
    print('ERROR: frame number '+ str(n) + ' is out of bounds. This frame was not simulated in MCell.')
    
# finds are print the .dat file associated
def update_frame_data(scene):
    found = False
    frame_num = bpy.context.scene.frame_current
    # os directory that enables access to files within the input folder 
    filepath = os.scandir(sys.argv[4])
    # use regex to find appropriate data file in seed folder
    for dat_file in filepath:
        if re.match(r'(.*\.0*{}\.dat)'.format(frame_num), str(dat_file)):
                
            found = True
            # dat_file.path gets the entire folder path as well as the file name as a string.
            visualize_data(scene, dat_file.path)
            break
            
    if not found:
        # print out of bounds error
        out_of_bounds(frame_num)


# remove all default objects from blender startup
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete()
# update the visual output by sending the .dat files created by mcell into cellblender for each frame
bpy.app.handlers.frame_change_pre.append(update_frame_data)
