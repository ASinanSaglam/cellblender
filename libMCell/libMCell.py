# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libMCell', [dirname(__file__)])
        except ImportError:
            import _libMCell
            return _libMCell
        if fp is not None:
            try:
                _mod = imp.load_module('_libMCell', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libMCell = swig_import_helper()
    del swig_import_helper
else:
    import _libMCell
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class MCellRandomNumber(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCellRandomNumber, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCellRandomNumber, name)
    __repr__ = _swig_repr
    def rng_gauss(self): return _libMCell.MCellRandomNumber_rng_gauss(self)
    def __init__(self): 
        this = _libMCell.new_MCellRandomNumber()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libMCell.delete_MCellRandomNumber
    __del__ = lambda self : None;
MCellRandomNumber_swigregister = _libMCell.MCellRandomNumber_swigregister
MCellRandomNumber_swigregister(MCellRandomNumber)

class MCellRandomNumber_mrng(MCellRandomNumber):
    __swig_setmethods__ = {}
    for _s in [MCellRandomNumber]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCellRandomNumber_mrng, name, value)
    __swig_getmethods__ = {}
    for _s in [MCellRandomNumber]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCellRandomNumber_mrng, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libMCell.new_MCellRandomNumber_mrng(*args)
        try: self.this.append(this)
        except: self.this = this
    def generate(self): return _libMCell.MCellRandomNumber_mrng_generate(self)
    __swig_destroy__ = _libMCell.delete_MCellRandomNumber_mrng
    __del__ = lambda self : None;
MCellRandomNumber_mrng_swigregister = _libMCell.MCellRandomNumber_mrng_swigregister
MCellRandomNumber_mrng_swigregister(MCellRandomNumber_mrng)

class MCellMoleculeSpecies(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCellMoleculeSpecies, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCellMoleculeSpecies, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libMCell.MCellMoleculeSpecies_name_set
    __swig_getmethods__["name"] = _libMCell.MCellMoleculeSpecies_name_get
    if _newclass:name = _swig_property(_libMCell.MCellMoleculeSpecies_name_get, _libMCell.MCellMoleculeSpecies_name_set)
    __swig_setmethods__["type"] = _libMCell.MCellMoleculeSpecies_type_set
    __swig_getmethods__["type"] = _libMCell.MCellMoleculeSpecies_type_get
    if _newclass:type = _swig_property(_libMCell.MCellMoleculeSpecies_type_get, _libMCell.MCellMoleculeSpecies_type_set)
    __swig_setmethods__["type_code"] = _libMCell.MCellMoleculeSpecies_type_code_set
    __swig_getmethods__["type_code"] = _libMCell.MCellMoleculeSpecies_type_code_get
    if _newclass:type_code = _swig_property(_libMCell.MCellMoleculeSpecies_type_code_get, _libMCell.MCellMoleculeSpecies_type_code_set)
    __swig_setmethods__["diffusion_constant"] = _libMCell.MCellMoleculeSpecies_diffusion_constant_set
    __swig_getmethods__["diffusion_constant"] = _libMCell.MCellMoleculeSpecies_diffusion_constant_get
    if _newclass:diffusion_constant = _swig_property(_libMCell.MCellMoleculeSpecies_diffusion_constant_get, _libMCell.MCellMoleculeSpecies_diffusion_constant_set)
    __swig_setmethods__["instance_list"] = _libMCell.MCellMoleculeSpecies_instance_list_set
    __swig_getmethods__["instance_list"] = _libMCell.MCellMoleculeSpecies_instance_list_get
    if _newclass:instance_list = _swig_property(_libMCell.MCellMoleculeSpecies_instance_list_get, _libMCell.MCellMoleculeSpecies_instance_list_set)
    __swig_setmethods__["num_instances"] = _libMCell.MCellMoleculeSpecies_num_instances_set
    __swig_getmethods__["num_instances"] = _libMCell.MCellMoleculeSpecies_num_instances_get
    if _newclass:num_instances = _swig_property(_libMCell.MCellMoleculeSpecies_num_instances_get, _libMCell.MCellMoleculeSpecies_num_instances_set)
    def __init__(self): 
        this = _libMCell.new_MCellMoleculeSpecies()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libMCell.delete_MCellMoleculeSpecies
    __del__ = lambda self : None;
MCellMoleculeSpecies_swigregister = _libMCell.MCellMoleculeSpecies_swigregister
MCellMoleculeSpecies_swigregister(MCellMoleculeSpecies)

class MCellMoleculeInstance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCellMoleculeInstance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCellMoleculeInstance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["molecule_species"] = _libMCell.MCellMoleculeInstance_molecule_species_set
    __swig_getmethods__["molecule_species"] = _libMCell.MCellMoleculeInstance_molecule_species_get
    if _newclass:molecule_species = _swig_property(_libMCell.MCellMoleculeInstance_molecule_species_get, _libMCell.MCellMoleculeInstance_molecule_species_set)
    __swig_setmethods__["x"] = _libMCell.MCellMoleculeInstance_x_set
    __swig_getmethods__["x"] = _libMCell.MCellMoleculeInstance_x_get
    if _newclass:x = _swig_property(_libMCell.MCellMoleculeInstance_x_get, _libMCell.MCellMoleculeInstance_x_set)
    __swig_setmethods__["y"] = _libMCell.MCellMoleculeInstance_y_set
    __swig_getmethods__["y"] = _libMCell.MCellMoleculeInstance_y_get
    if _newclass:y = _swig_property(_libMCell.MCellMoleculeInstance_y_get, _libMCell.MCellMoleculeInstance_y_set)
    __swig_setmethods__["z"] = _libMCell.MCellMoleculeInstance_z_set
    __swig_getmethods__["z"] = _libMCell.MCellMoleculeInstance_z_get
    if _newclass:z = _swig_property(_libMCell.MCellMoleculeInstance_z_get, _libMCell.MCellMoleculeInstance_z_set)
    __swig_setmethods__["next"] = _libMCell.MCellMoleculeInstance_next_set
    __swig_getmethods__["next"] = _libMCell.MCellMoleculeInstance_next_get
    if _newclass:next = _swig_property(_libMCell.MCellMoleculeInstance_next_get, _libMCell.MCellMoleculeInstance_next_set)
    def __init__(self): 
        this = _libMCell.new_MCellMoleculeInstance()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libMCell.delete_MCellMoleculeInstance
    __del__ = lambda self : None;
MCellMoleculeInstance_swigregister = _libMCell.MCellMoleculeInstance_swigregister
MCellMoleculeInstance_swigregister(MCellMoleculeInstance)

class MCellReleaseSite(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCellReleaseSite, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCellReleaseSite, name)
    __repr__ = _swig_repr
    __swig_setmethods__["molecule_species"] = _libMCell.MCellReleaseSite_molecule_species_set
    __swig_getmethods__["molecule_species"] = _libMCell.MCellReleaseSite_molecule_species_get
    if _newclass:molecule_species = _swig_property(_libMCell.MCellReleaseSite_molecule_species_get, _libMCell.MCellReleaseSite_molecule_species_set)
    __swig_setmethods__["x"] = _libMCell.MCellReleaseSite_x_set
    __swig_getmethods__["x"] = _libMCell.MCellReleaseSite_x_get
    if _newclass:x = _swig_property(_libMCell.MCellReleaseSite_x_get, _libMCell.MCellReleaseSite_x_set)
    __swig_setmethods__["y"] = _libMCell.MCellReleaseSite_y_set
    __swig_getmethods__["y"] = _libMCell.MCellReleaseSite_y_get
    if _newclass:y = _swig_property(_libMCell.MCellReleaseSite_y_get, _libMCell.MCellReleaseSite_y_set)
    __swig_setmethods__["z"] = _libMCell.MCellReleaseSite_z_set
    __swig_getmethods__["z"] = _libMCell.MCellReleaseSite_z_get
    if _newclass:z = _swig_property(_libMCell.MCellReleaseSite_z_get, _libMCell.MCellReleaseSite_z_set)
    __swig_setmethods__["quantity"] = _libMCell.MCellReleaseSite_quantity_set
    __swig_getmethods__["quantity"] = _libMCell.MCellReleaseSite_quantity_get
    if _newclass:quantity = _swig_property(_libMCell.MCellReleaseSite_quantity_get, _libMCell.MCellReleaseSite_quantity_set)
    __swig_setmethods__["next"] = _libMCell.MCellReleaseSite_next_set
    __swig_getmethods__["next"] = _libMCell.MCellReleaseSite_next_get
    if _newclass:next = _swig_property(_libMCell.MCellReleaseSite_next_get, _libMCell.MCellReleaseSite_next_set)
    def __init__(self): 
        this = _libMCell.new_MCellReleaseSite()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libMCell.delete_MCellReleaseSite
    __del__ = lambda self : None;
MCellReleaseSite_swigregister = _libMCell.MCellReleaseSite_swigregister
MCellReleaseSite_swigregister(MCellReleaseSite)

class MCellEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCellEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCellEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _libMCell.MCellEvent_time_set
    __swig_getmethods__["time"] = _libMCell.MCellEvent_time_get
    if _newclass:time = _swig_property(_libMCell.MCellEvent_time_get, _libMCell.MCellEvent_time_set)
    def __init__(self): 
        this = _libMCell.new_MCellEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libMCell.delete_MCellEvent
    __del__ = lambda self : None;
MCellEvent_swigregister = _libMCell.MCellEvent_swigregister
MCellEvent_swigregister(MCellEvent)

class MCellTimerEvent(MCellEvent):
    __swig_setmethods__ = {}
    for _s in [MCellEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCellTimerEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [MCellEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCellTimerEvent, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libMCell.new_MCellTimerEvent()
        try: self.this.append(this)
        except: self.this = this
    def execute(self): return _libMCell.MCellTimerEvent_execute(self)
    __swig_destroy__ = _libMCell.delete_MCellTimerEvent
    __del__ = lambda self : None;
MCellTimerEvent_swigregister = _libMCell.MCellTimerEvent_swigregister
MCellTimerEvent_swigregister(MCellTimerEvent)

class MCellMolCreationEvent(MCellEvent):
    __swig_setmethods__ = {}
    for _s in [MCellEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCellMolCreationEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [MCellEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MCellMolCreationEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mol"] = _libMCell.MCellMolCreationEvent_mol_set
    __swig_getmethods__["mol"] = _libMCell.MCellMolCreationEvent_mol_get
    if _newclass:mol = _swig_property(_libMCell.MCellMolCreationEvent_mol_get, _libMCell.MCellMolCreationEvent_mol_set)
    def __init__(self): 
        this = _libMCell.new_MCellMolCreationEvent()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _libMCell.MCellMolCreationEvent_execute(self, *args)
    __swig_destroy__ = _libMCell.delete_MCellMolCreationEvent
    __del__ = lambda self : None;
MCellMolCreationEvent_swigregister = _libMCell.MCellMolCreationEvent_swigregister
MCellMolCreationEvent_swigregister(MCellMolCreationEvent)

class MCellSimulation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MCellSimulation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MCellSimulation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_simulations"] = _libMCell.MCellSimulation_num_simulations_set
    __swig_getmethods__["num_simulations"] = _libMCell.MCellSimulation_num_simulations_get
    if _newclass:num_simulations = _swig_property(_libMCell.MCellSimulation_num_simulations_get, _libMCell.MCellSimulation_num_simulations_set)
    __swig_setmethods__["num_iterations"] = _libMCell.MCellSimulation_num_iterations_set
    __swig_getmethods__["num_iterations"] = _libMCell.MCellSimulation_num_iterations_get
    if _newclass:num_iterations = _swig_property(_libMCell.MCellSimulation_num_iterations_get, _libMCell.MCellSimulation_num_iterations_set)
    __swig_setmethods__["time_step"] = _libMCell.MCellSimulation_time_step_set
    __swig_getmethods__["time_step"] = _libMCell.MCellSimulation_time_step_get
    if _newclass:time_step = _swig_property(_libMCell.MCellSimulation_time_step_get, _libMCell.MCellSimulation_time_step_set)
    __swig_setmethods__["has_reactions"] = _libMCell.MCellSimulation_has_reactions_set
    __swig_getmethods__["has_reactions"] = _libMCell.MCellSimulation_has_reactions_get
    if _newclass:has_reactions = _swig_property(_libMCell.MCellSimulation_has_reactions_get, _libMCell.MCellSimulation_has_reactions_set)
    __swig_setmethods__["timer_event_handlers"] = _libMCell.MCellSimulation_timer_event_handlers_set
    __swig_getmethods__["timer_event_handlers"] = _libMCell.MCellSimulation_timer_event_handlers_get
    if _newclass:timer_event_handlers = _swig_property(_libMCell.MCellSimulation_timer_event_handlers_get, _libMCell.MCellSimulation_timer_event_handlers_set)
    __swig_setmethods__["mol_creation_event_handlers"] = _libMCell.MCellSimulation_mol_creation_event_handlers_set
    __swig_getmethods__["mol_creation_event_handlers"] = _libMCell.MCellSimulation_mol_creation_event_handlers_get
    if _newclass:mol_creation_event_handlers = _swig_property(_libMCell.MCellSimulation_mol_creation_event_handlers_get, _libMCell.MCellSimulation_mol_creation_event_handlers_set)
    __swig_setmethods__["molecule_species"] = _libMCell.MCellSimulation_molecule_species_set
    __swig_getmethods__["molecule_species"] = _libMCell.MCellSimulation_molecule_species_get
    if _newclass:molecule_species = _swig_property(_libMCell.MCellSimulation_molecule_species_get, _libMCell.MCellSimulation_molecule_species_set)
    __swig_setmethods__["molecule_release_sites"] = _libMCell.MCellSimulation_molecule_release_sites_set
    __swig_getmethods__["molecule_release_sites"] = _libMCell.MCellSimulation_molecule_release_sites_get
    if _newclass:molecule_release_sites = _swig_property(_libMCell.MCellSimulation_molecule_release_sites_get, _libMCell.MCellSimulation_molecule_release_sites_set)
    def __init__(self): 
        this = _libMCell.new_MCellSimulation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libMCell.delete_MCellSimulation
    __del__ = lambda self : None;
    def add_molecule_species(self, *args): return _libMCell.MCellSimulation_add_molecule_species(self, *args)
    def add_molecule_release_site(self, *args): return _libMCell.MCellSimulation_add_molecule_release_site(self, *args)
    def get_molecule_species_by_name(self, *args): return _libMCell.MCellSimulation_get_molecule_species_by_name(self, *args)
    def run_simulation(self, *args): return _libMCell.MCellSimulation_run_simulation(self, *args)
    def dump_state(self): return _libMCell.MCellSimulation_dump_state(self)
MCellSimulation_swigregister = _libMCell.MCellSimulation_swigregister
MCellSimulation_swigregister(MCellSimulation)
cvar = _libMCell.cvar

# This file is compatible with both classic and new-style classes.


